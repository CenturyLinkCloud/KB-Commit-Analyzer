// Generated by CoffeeScript 1.12.6
(function() {
  var App, ERROR_CODE_RANGE_START, LinkParser, RegExplorer, _, fs, marked, path, request;

  request = require('urllib-sync').request;

  path = require('path');

  fs = require('fs');

  marked = require('marked');

  _ = require('lodash');

  ERROR_CODE_RANGE_START = 400;

  App = {
    failures: []
  };

  RegExplorer = {
    link: /(https?:\/\/?)([\da-z\.-]+\.[a-z\.]{2,6}[\/\w\-].*?)"/
  };

  LinkParser = {
    linkMatches: [],
    parse: function(file, failed) {
      var markdown, output;
      console.log("Parsing links...\n\n\n");
      output = fs.readFileSync(file.fullPath, 'utf-8');
      markdown = marked(output).split("\n");
      _.each(markdown, (function(_this) {
        return function(line) {
          var linkMatch;
          line = line.replace(/&amp;/g, '&');
          linkMatch = RegExplorer.link.exec(line);
          if (linkMatch) {
            return _this.linkMatches.push(linkMatch[0].slice(0, -1));
          }
        };
      })(this));
      return this.validateLinks(file.fullPath);
    },
    validateLinks: function(file) {
      var failed;
      _.each(this.linkMatches, (function(_this) {
        return function(link) {
          return _this.validateLink(link, file);
        };
      })(this));
      failed = App.failures.length ? true : false;
      return failed;
    },
    validateLink: function(link, file) {
      var error, res, status;
      try {
        res = request(link);
        status = res.status;
        if (status >= ERROR_CODE_RANGE_START) {
          return this.logError(link, null, status, file);
        }
      } catch (error1) {
        error = error1;
        return this.logError(link, error.stack.slice(0, 100), null, file);
      }
    },
    logError: function(link, status, errorMsg, file) {
      var extraMsg;
      extraMsg = status ? "response " + status + "." : "error '" + errorMsg + "'.";
      console.log('Build failed!');
      console.log("Reaching '" + link + "' failed for the following reason: " + extraMsg);
      console.log("Link referenced in '" + file + "'\n");
      return App.failures.push(link);
    }
  };

  module.exports = LinkParser;

}).call(this);

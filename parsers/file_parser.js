// Generated by CoffeeScript 1.12.6
(function() {
  var App, FileParser, RegExplorer, _, colors, fs, marked, path;

  fs = require('fs');

  path = require('path');

  marked = require('marked');

  colors = require('colors');

  _ = require('lodash');

  App = {
    failures: []
  };

  RegExplorer = {
    filePath: /(href|src)="(?!\?|http|mailto|ftp|sftp|git|smtp|file)(?!\/\/)((?!#)(.*?)((#.*?)?)("))/
  };

  FileParser = {
    imagePaths: [],
    markdownPaths: [],
    currentPath: '',
    files: [],
    parse: function(file, failed) {
      var markdown, output;
      App.failures = [];
      this.printWorkingIndicator();
      this.currentPath = file.fullParentDir;
      output = fs.readFileSync(file.fullPath, 'utf-8');
      markdown = marked(output).split("\n");
      _.each(markdown, (function(_this) {
        return function(line) {
          var filePathMatch;
          line = line.replace(/&amp;/g, '&');
          filePathMatch = RegExplorer.filePath.exec(line);
          if (filePathMatch) {
            return _this.files.push(filePathMatch[3]);
          }
        };
      })(this));
      this.checkFiles(this.files, this.currentPath, file.fullPath);
      if (App.failures.length) {
        failed = true;
      }
      this.files = [];
      return failed;
    },
    checkFiles: function(files, curPath, refFile) {
      return _.each(files, (function(_this) {
        return function(file) {
          var err, fd, resolvedPath;
          resolvedPath = path.resolve(curPath, file);
          try {
            fd = fs.openSync(resolvedPath, 'r');
            return fs.closeSync(fd);
          } catch (error) {
            err = error;
            return _this.printErrorAndReturnFailure(resolvedPath, refFile);
          }
        };
      })(this));
    },
    printErrorAndReturnFailure: function(file, refFile) {
      console.log(("\nFile '" + file + "' not found. Is there a file extension? Are the file extension and path correct? (Referenced from '" + refFile + "')").red);
      return App.failures.push(file);
    },
    printWorkingIndicator: function() {
      return process.stdout.write(".");
    }
  };

  module.exports = FileParser;

}).call(this);

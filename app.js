// Generated by CoffeeScript 1.12.6
(function() {
  var App, F, Ignored, _, coffeescript, es, fileParser, frontMatterParser, fs, linkAttributeParser, linkParser, markdownParser, path, readdirp;

  readdirp = require('readdirp');

  path = require('path');

  es = require('event-stream');

  coffeescript = require('coffee-script');

  fs = require('graceful-fs');

  _ = require('lodash');

  frontMatterParser = require('./parsers/front_matter_parser');

  markdownParser = require('./parsers/markdown_parser');

  fileParser = require('./parsers/file_parser');

  linkParser = require('./parsers/link_parser');

  linkAttributeParser = require('./parsers/link_attribute_parser');

  F = {
    failed: null
  };

  Ignored = {
    files: []
  };

  App = {
    analyze: function() {
      this.loadIgnored();
      return readdirp(this.readOpts(), (function(_this) {
        return function(file) {
          if (_this.fileIsIgnored(file.name)) {
            return;
          }
          return _.each(_this.parsers, function(parser) {
            var failed;
            failed = F.failed;
            return F.failed = parser.parse(file, failed);
          });
        };
      })(this), (function(_this) {
        return function(err, res) {
          if (F.failed) {
            return process.exit(1);
          } else {
            return process.exit(0);
          }
        };
      })(this));
    },
    parsers: [frontMatterParser, markdownParser, fileParser, linkAttributeParser],
    directoryFilters: ['!node_modules', '!lib'],
    fileFilters: '*.md',
    readOpts: function() {
      return {
        root: path.join(__dirname, '..'),
        fileFilter: this.fileFilters,
        directoryFilter: this.directoryFilters
      };
    },
    fileIsIgnored: function(file) {
      return _.indexOf(Ignored.files, file) >= 0;
    },
    loadIgnored: function() {
      var err, files;
      try {
        files = fs.readFileSync('../commit_analyzer_ignore.txt', 'utf-8');
        files = files.split('\n');
        console.log("\n\nIgnoring " + (files.join(', ')));
        return _.each(files, function(file) {
          return Ignored.files.push(file);
        });
      } catch (error) {
        err = error;
        return console.log("\n\nunable to find commit_analyzer_ignore.txt file; not ignoring any files...\n\n");
      }
    }
  };

  App.analyze();

}).call(this);
